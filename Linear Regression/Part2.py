# -*- coding: utf-8 -*-
"""Assignment1_part2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/115l2KtNZzn-azpiad2mb-B8zkVdt6jO8

#Assignment 1: Part 2 - Linear Regression Using ML Libraries
# Submitted by:
# 1. Yagna Srinivasa Harsha Annadata(YXA210024)
# 2. Vishruth Reddy Chinthi Reddy(VXC220020)


# *   Train a linear model on a dataset using ML Libraries.


*   We used the linear regression library of scikit learn.
*   Measure the model using various evaluation statistics - MSE, MAE, R2 value.
*   Compare the results with the part 1 linear regression using gradient descent results
"""

import numpy as np
import seaborn as sns
import pandas as pd
import requests
import csv
from io import StringIO
from matplotlib import pyplot
from sklearn.preprocessing import StandardScaler
from sklearn.linear_model import LinearRegression
from sklearn.model_selection import train_test_split
from sklearn.metrics import mean_squared_error, mean_absolute_error, r2_score
from sklearn import linear_model

path="https://raw.githubusercontent.com/YagnaAnnadata/Projects/main/LinearRegression/Dataset/winequality/winequality-red.csv"

response = requests.get(path)
csv_data = StringIO(response.text)
df_train = pd.read_csv(csv_data, delimiter=';')
print("########## NULL Values in dataset ###########")
print(df_train.isna().sum())
df_train.corr()

df = df_train.copy()

scaler = StandardScaler()
df = pd.DataFrame(scaler.fit_transform(df), columns=df_train.columns)

train, test = train_test_split(df, test_size=0.1, random_state = 40)
X_train = train.drop(columns=['quality']).to_numpy()
X_test = test.drop(columns=['quality']).to_numpy()
Y_train = train['quality'].to_numpy()
Y_test = test['quality'].to_numpy()

linear_model = LinearRegression().fit(X_train, Y_train)

Y_train_predict = linear_model.predict(X_train)
Y_test_predict = linear_model.predict(X_test)

mae_train = mean_absolute_error(Y_train,Y_train_predict)
mse_train = mean_squared_error(Y_train,Y_train_predict)
r2_train = r2_score(Y_train, Y_train_predict)
mae_test = mean_absolute_error(Y_test,Y_test_predict)
mse_test = mean_squared_error(Y_test,Y_test_predict)
r2_test = r2_score(Y_test,Y_test_predict)

df_metrics = pd.DataFrame([[mae_train, mae_test], [mse_train, mse_test], [r2_train, r2_test]],
             index = ["Mean Absolute Error", "Mean Square Error", "R2 Score"],
             columns = ["train", "test"])

display(df_metrics)

print()
print(" ------ Training Performance ------ ")
print("- Mean Squared Error =",mae_train)
print("- Mean Absolute Error =",mse_train)
print("- R2 Score =",r2_train)
print()
print(" ------ Testing Performance ------ ")
print("- Mean Squared Error =",mae_test)
print("- Mean Absolute Error =",mse_test)
print("- R2 Score =",r2_test)